{"version":3,"sources":["Images/Lentes.svg","Components/Pyramid.tsx","Presentation.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DataState","parseLine","line","result","replace","match","g1","g2","g3","data","undefined","push","Pyramid","props","timer","handleKeyPressed","event","key","playPause","stop","back","advance","state","dataState","Ready","setState","nextFrame","frame","times","length","prevFrame","play","isPlaying","window","setInterval","clearInterval","Loading","this","document","addEventListener","axios","get","process","then","csvData","split","map","title","shift","sources","slice","maxValue","males","nextLine","group","values","value","parsed","Number","parseFloat","isNaN","localMaxValue","reduce","a","b","Math","max","females","lastSource","i","parseCSV","catch","Error","removeEventListener","width","alignSelf","bg","flexDirection","horizontal","domain","y","x","datum","React","Component","theme","colors","primary","secondary","tertiary","Presentation","src","lentes","textAlign","fontSize","height","viewBox","style","background","boxSizing","display","padding","fontFamily","fill","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.b49319a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Lentes.22f42be4.svg\";","import React from 'react';\nimport axios from 'axios';\nimport { FlexBox, Heading } from 'spectacle';\nimport { VictoryBar, VictoryChart } from 'victory';\n\nenum DataState {\n  Ready,\n  Loading,\n  Error,\n}\n\ntype PyramidState = {\n  dataState: DataState,\n  isPlaying: boolean,\n  frame: number,\n};\n\ntype Data = {\n  title: string,\n  sources: string[],\n  times: string[],\n  maxValue: number,\n  males: PlotData[],\n  females: PlotData[],\n};\n\ntype PlotData = {\n  group: string,\n  values: number[],\n};\n\nfunction parseLine(line:string) {\n  const lineRegex = /(?!\\s*$)\\s*(?:'([^'\\\\]*(?:\\\\[\\S\\s][^'\\\\]*)*)'|\"([^\"\\\\]*(?:\\\\[\\S\\s][^\"\\\\]*)*)\"|([^,\\s]*(?:\\s+[^,\\s]+)*))\\s*(?:,|$)/g;\n  const result:string[] = [];\n  line.replace(lineRegex, (match:string, g1:string, g2:string, g3:string) => {\n    let data = '';\n    if (g1 !== undefined) {\n      data = g1;\n    } else if (g2 !== undefined) {\n      data = g2;\n    } else if (g3 !== undefined) {\n      data = g3;\n    }\n    data.replace(/\\\\'/g, '\\'');\n    data.replace(/\\\\\"/g, '\"');\n    // data.replace(/\\\\n/g, '\\n');\n    result.push(data);\n    return '';\n  });\n  return result;\n}\n\n\nfunction parseCSV(csvData: string): Data {\n  const data = csvData.split('\\n').map(parseLine);\n  const title = data.shift()![0];\n  const sources = data.shift()!.slice(1);\n  const times = data.shift()!.slice(1);\n\n  let maxValue = 0;\n\n  const males:PlotData[] = [];\n\n  let nextLine = data.shift();\n  while (nextLine !== undefined && nextLine[0] !== 'Mujeres') {\n    const group = nextLine.shift()!;\n    const values = nextLine.map((value) => {\n      const parsed = Number.parseFloat(value);\n      if (Number.isNaN(parsed)) return 0;\n      return parsed;\n    });\n    const localMaxValue = values.reduce((a, b) => Math.max(a, b));\n    maxValue = Math.max(maxValue, localMaxValue);\n    males.push({ group, values });\n    nextLine = data.shift();\n  }\n\n  const females:PlotData[] = [];\n\n  nextLine = data.shift();\n  while (nextLine !== undefined && nextLine[0] !== undefined) {\n    const group = nextLine!.shift()!;\n    const values = nextLine.map((value) => {\n      const parsed = Number.parseFloat(value);\n      if (Number.isNaN(parsed)) return 0;\n      return parsed;\n    });\n    const localMaxValue = values.reduce((a, b) => Math.max(a, b));\n    maxValue = Math.max(maxValue, localMaxValue);\n    females.push({ group, values });\n    nextLine = data.shift();\n  }\n\n  let lastSource = '';\n  for (let i = 0; i < sources.length; i += 1) {\n    if (sources[i] === '') {\n      sources[i] = lastSource;\n    } else {\n      lastSource = sources[i];\n    }\n  }\n\n  return ({\n    title, sources, times, maxValue, males, females,\n  });\n}\n\nclass Pyramid extends React.Component<{}, PyramidState> {\n  data:Data | null = null;\n\n  timer:number | undefined = undefined;\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      dataState: DataState.Loading,\n      isPlaying: false,\n      frame: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ dataState: DataState.Loading });\n    document.addEventListener('keyup', this.handleKeyPressed);\n\n    axios.get(`${process.env.PUBLIC_URL}/data/Nacional1910.csv`).then((result) => {\n      this.data = parseCSV(result.data);\n      this.setState({ dataState: DataState.Ready });\n    }).catch(() => {\n      this.setState({ dataState: DataState.Error });\n    });\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyPressed);\n  }\n\n  handleKeyPressed = (event: KeyboardEvent) => {\n    if (event.key === ' ') {\n      this.playPause();\n    } else if (event.key === 'ArrowUp') {\n      this.stop();\n      this.back();\n    } else if (event.key === 'ArrowDown') {\n      this.stop();\n      this.advance();\n    }\n  };\n\n  advance = () => {\n    const { dataState } = this.state;\n    if (dataState === DataState.Ready) {\n      this.setState((state) => {\n        let nextFrame = state.frame + 1;\n        if (nextFrame >= this.data!.times.length) {\n          nextFrame = 0;\n        }\n        return ({ frame: nextFrame });\n      });\n    }\n  };\n\n  back = () => {\n    const { dataState } = this.state;\n    if (dataState === DataState.Ready) {\n      this.setState((state) => {\n        let prevFrame = state.frame - 1;\n        if (prevFrame < 0) {\n          prevFrame = this.data!.times.length - 1;\n        }\n        return ({ frame: prevFrame });\n      });\n    }\n  };\n\n  play = () => {\n    const { dataState, isPlaying } = this.state;\n    if (dataState === DataState.Ready && !isPlaying) {\n      this.setState({ isPlaying: true });\n      this.timer = window.setInterval(() => this.advance(), 30);\n    }\n  };\n\n  stop = () => {\n    window.clearInterval(this.timer);\n    this.setState({ isPlaying: false });\n  };\n\n  playPause = () => {\n    const { isPlaying } = this.state;\n    if (isPlaying) {\n      this.stop();\n    } else {\n      this.play();\n    }\n  };\n\n  render() {\n    const { dataState, frame } = this.state;\n\n    if (dataState === DataState.Loading) {\n      return (<Heading>Cargando...</Heading>);\n    }\n    if (dataState === DataState.Error) {\n      return (<Heading>Error...</Heading>);\n    }\n\n    return (\n      <FlexBox width=\"70%\" alignSelf=\"center\" bg=\"grey\" flexDirection=\"column\">\n        <VictoryChart horizontal domain={{ y: [0, this.data!.maxValue] }}>\n          <VictoryBar\n            data={this.data?.females}\n            x=\"group\"\n            y={(datum:PlotData) => datum.values[frame]}\n          />\n        </VictoryChart>\n      </FlexBox>\n    );\n  }\n}\n\nexport default Pyramid;\n","import React from 'react';\nimport {\n  Deck, Slide, Heading, Text, Image, FlexBox,\n} from 'spectacle';\nimport Pyramid from './Components/Pyramid';\nimport lentes from './Images/Lentes.svg';\n\nconst theme = {\n  colors: {\n    primary: 'white',\n    secondary: '#fffd38',\n    tertiary: '#22466a',\n  },\n};\n\nfunction Presentation() {\n  return (\n    <Deck theme={theme}>\n      <Slide>\n        <FlexBox>\n          <Image src={lentes} />\n          <Heading>Del machismo ancestral a un nuevo paradigma de la masculinidad</Heading>\n        </FlexBox>\n        <Text textAlign=\"center\" fontSize=\"h3\">\n          Una alternativa para la reconciliación y la equidad entre hombres y mujeres\n        </Text>\n        <Text textAlign=\"right\">\n          Ing. Arturo E. Rosales Jaime\n        </Text>\n      </Slide>\n      <Slide>\n        <FlexBox bg=\"grey\" width=\"60%\" height=\"100%\" alignSelf=\"center\">\n          <svg\n            viewBox=\"0 0 450 350\"\n            style={{\n              background: '#ccdee8',\n              boxSizing: 'border-box',\n              display: 'inline',\n              padding: 0,\n              fontFamily: \"'Fira Sans', sans-serif\",\n              width: '100%',\n              height: 'auto',\n            }}\n          >\n            <rect x=\"0\" y=\"0\" width=\"10\" height=\"30\" fill=\"#f01616\" />\n          </svg>\n        </FlexBox>\n      </Slide>\n      <Slide>\n        <Pyramid />\n      </Slide>\n    </Deck>\n  );\n}\n\nexport default Presentation;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Presentation from './Presentation';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Presentation />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}